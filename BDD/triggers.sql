CREATE OR REPLACE TRIGGER formatos_repetidos
AFTER INSERT
ON FORMATO
REFERENCING NEW AS New OLD AS Old

BEGIN
    DELETE FROM FORMATO WHERE ID_FORMATO =(
        SELECT MAX(ID_FORMATO)
        FROM FORMATO
        GROUP BY UPPER(NOMBRE_FORMATO)
        HAVING COUNT(*)>1
    );
END formatos_repetidos;




CREATE OR REPLACE TRIGGER requisitos_repetidos
AFTER INSERT
ON REQUISITO
REFERENCING NEW AS New OLD AS Old

BEGIN
    DELETE FROM REQUISITO WHERE ID_REQUISITO =(
        SELECT MAX(ID_REQUISITO)
        FROM REQUISITO
        GROUP BY UPPER(NOMBRE_REQUISITO)
        HAVING COUNT(*)>1
    );
END requisitos_repetidos;




CREATE OR REPLACE TRIGGER formato_requisitos_repetidos
AFTER INSERT
ON FORMATO_REQUISITO
REFERENCING NEW AS New OLD AS Old

BEGIN
    DELETE FROM FORMATO_REQUISITO WHERE ID_FORMATO_REQUISITO =(
        SELECT MAX(ID_FORMATO_REQUISITO)
        FROM FORMATO_REQUISITO
        GROUP BY ID_REQUISITO, ID_FORMATO
        HAVING COUNT(*)>1
    );
END formato_requisitos_repetidos;



CREATE OR REPLACE TRIGGER puestos_repetidos
AFTER INSERT
ON PUESTO
REFERENCING NEW AS New OLD AS Old

BEGIN
    DELETE FROM PUESTO WHERE ID_PUESTO =(
        SELECT MAX(ID_PUESTO)
        FROM PUESTO
        GROUP BY UPPER(NOMBRE_PUESTO), SALARIO, UPPER(LINK_IMAGEN)
        HAVING COUNT(*)>1
    );
END puestos_repetidos;




CREATE OR REPLACE TRIGGER puesto_requisitos_repetidos
AFTER INSERT
ON PUESTO_REQUISITO
REFERENCING NEW AS New OLD AS Old

BEGIN
    DELETE FROM PUESTO_REQUISITO WHERE ID_PUESTO_REQUISITO =(
        SELECT MAX(ID_PUESTO_REQUISITO)
        FROM PUESTO_REQUISITO
        GROUP BY ID_REQUISITO, ID_PUESTO, TAMANIO_REQUISITO, OBLIGATORIO
        HAVING COUNT(*)>1
    );
END puesto_requisitos_repetidos;




CREATE OR REPLACE TRIGGER categorias_repetidos
AFTER INSERT
ON CATEGORIA
REFERENCING NEW AS New OLD AS Old

BEGIN
    DELETE FROM CATEGORIA WHERE ID_CATEGORIA =(
        SELECT MAX(ID_CATEGORIA)
        FROM CATEGORIA
        GROUP BY UPPER(NOMBRE_CATEGORIA)
        HAVING COUNT(*)>1
    );
END categorias_repetidos;



CREATE OR REPLACE TRIGGER puesto_categoria_repetidos
AFTER INSERT
ON PUESTO_CATEGORIA
REFERENCING NEW AS New OLD AS Old

BEGIN
    DELETE FROM PUESTO_CATEGORIA WHERE ID_PUESTO_CATEGORIA =(
        SELECT MAX(ID_PUESTO_CATEGORIA)
        FROM PUESTO_CATEGORIA
        GROUP BY ID_CATEGORIA, ID_PUESTO
        HAVING COUNT(*)>1
    );
END puesto_categoria_repetidos;




CREATE OR REPLACE TRIGGER departamentos_repetidos
AFTER INSERT
ON DEPARTAMENTO
REFERENCING NEW AS New OLD AS Old

BEGIN
    DELETE FROM DEPARTAMENTO WHERE ID_DEPARTAMENTO =(
        SELECT MAX(ID_DEPARTAMENTO)
        FROM DEPARTAMENTO
        GROUP BY UPPER(NOMBRE_DEPARTAMENTO), CAPITAL_DEPARTAMENTO, UPPER(DEPARTAMENTO_PADRE)
        HAVING COUNT(*)>1
    );
END departamentos_repetidos;




CREATE OR REPLACE TRIGGER puesto_departamento_repetidos
AFTER INSERT
ON PUESTO_DEPARTAMENTO
REFERENCING NEW AS New OLD AS Old

BEGIN
    DELETE FROM PUESTO_DEPARTAMENTO WHERE ID_PUESTO_DEPARTAMENTO =(
        SELECT MAX(ID_PUESTO_DEPARTAMENTO)
        FROM PUESTO_DEPARTAMENTO
        GROUP BY ID_DEPARTAMENTO, ID_PUESTO
        HAVING COUNT(*)>1
    );
END puesto_departamento_repetidos;




CREATE OR REPLACE TRIGGER rol_repetidos
AFTER INSERT
ON ROL
REFERENCING NEW AS New OLD AS Old

BEGIN
    DELETE FROM ROL WHERE ID_ROL =(
        SELECT MAX(ID_ROL)
        FROM ROL
        GROUP BY NOMBRE_ROL
        HAVING COUNT(*)>1
    );
END rol_repetidos;




CREATE OR REPLACE TRIGGER usuario_repetidos
AFTER INSERT
ON USUARIO
REFERENCING NEW AS New OLD AS Old

BEGIN
    DELETE FROM USUARIO WHERE ID_USUARIO =(
        SELECT MAX(ID_USUARIO)
        FROM USUARIO
        GROUP BY USERNAME
        HAVING COUNT(*)>1
    );
END usuario_repetidos;




CREATE OR REPLACE TRIGGER calificacion_usuario_puesto_repetidos
AFTER INSERT
ON CALIFICACION_USUARIO_PUESTO
REFERENCING NEW AS New OLD AS Old

BEGIN
    DELETE FROM CALIFICACION_USUARIO_PUESTO WHERE ID_CALIFICACION_USUARIO_PUESTO =(
        SELECT MAX(ID_CALIFICACION_USUARIO_PUESTO)
        FROM CALIFICACION_USUARIO_PUESTO
        GROUP BY CALIFICACION, ID_USUARIO, ID_PUESTO
        HAVING COUNT(*)>1
    );
END calificacion_usuario_puesto_repetidos;




CREATE OR REPLACE TRIGGER revisor_expedientes_repetidos
AFTER INSERT
ON REVISOR_EXPEDIENTES
REFERENCING NEW AS New OLD AS Old

BEGIN
    DELETE FROM REVISOR_EXPEDIENTES WHERE ID_REVISOR_EXPEDIENTES =(
        SELECT MAX(ID_REVISOR_EXPEDIENTES)
        FROM REVISOR_EXPEDIENTES
        GROUP BY ID_USUARIO
        HAVING COUNT(*)>1
    );
END revisor_expedientes_repetidos;


CREATE OR REPLACE TRIGGER expedientes_repetidos
AFTER INSERT
ON EXPEDIENTE
REFERENCING NEW AS New OLD AS Old

BEGIN
    DELETE FROM EXPEDIENTE WHERE ID_EXPEDIENTE =(
        SELECT MAX(ID_EXPEDIENTE)
        FROM EXPEDIENTE
        GROUP BY DPI, NOMBRES, APELLIDOS
        HAVING COUNT(*)>1
    );
END expedientes_repetidos;




CREATE OR REPLACE TRIGGER documentos_repetidos
AFTER INSERT
ON DOCUMENTO
REFERENCING NEW AS New OLD AS Old

BEGIN
    DELETE FROM DOCUMENTO WHERE ID_DOCUMENTO =(
        SELECT MAX(ID_DOCUMENTO)
        FROM DOCUMENTO
        GROUP BY NOMBRE_DOCUMENTO, ID_EXPEDIENTE
        HAVING COUNT(*)>1
    );
END documentos_repetidos;


CREATE OR REPLACE TRIGGER CrearRevisorExp
AFTER INSERT
    ON USUARIO
    FOR EACH ROW
BEGIN
    if :NEW.ID_ROL = 3 THEN

        insert into REVISOR_EXPEDIENTES (CANTIDAD_EXP, ID_USUARIO)
        values (0, :NEW.ID_USUARIO);
    end if;
END CrearRevisorExp;


